import logging

from aiogram import Router, Bot
from aiogram.filters import Command, or_f, CommandStart
from aiogram.types import Message
from aiomysql import Pool

from Database.database import masks
from Keyboards.user_kb import shop_kb
from Services.game_logic import get_balance, get_scores, calculate_new_growth, game_dice, get_my_masks, gather_all_masks
from Services.view_logic import view_table

user_messages = Router()


@user_messages.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"üéÆ –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ç—É—Ç —Ç–æ–ø?\n"
        "–í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
    )


@user_messages.message(Command('help'))
async def help_command(message: Message):
    commands_text = """
<b>/start</b> ‚Äì –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
<b>/dick</b> ‚Äì –£–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º üòè
<b>/game</b> ‚Äì –ú–∏–Ω–∏-–∏–≥—Ä–∞, —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
<b>/show_global_top</b> ‚Äì –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
<b>/show_chat_top</b> ‚Äì –õ–∏–¥–µ—Ä—ã —ç—Ç–æ–≥–æ —á–∞—Ç–∞
<b>/buy_mask</b> ‚Äì –ö—É–ø–∏—Ç—å –º–∞—Å–∫—É –∑–∞ –º–æ–Ω–µ—Ç—ã üé≠
<b>/buy_boost</b> ‚Äì –ö—É–ø–∏—Ç—å –±—É—Å—Ç: —É—Å–∫–æ—Ä–µ–Ω–∏–µ, –±–æ–Ω—É—Å—ã –∏ —Ç.–¥. ‚ö°
<b>/show_mask</b> ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –º–∞—Å–∫–∏ —É —Ç–µ–±—è –µ—Å—Ç—å
<b>/show_boosts</b> ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç—ã
"""
    await message.answer(commands_text, parse_mode="HTML")


@user_messages.message(Command('balance'))
async def balance_command(message: Message, dp_pool: Pool, user_id: int):
    coins = await get_balance(dp_pool, user_id)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç")


@user_messages.message(or_f(Command('dick'), Command('penis')))
async def grow_penis(message: Message, bot: Bot, dp_pool: Pool, chat_id: int, user_id: int, now: int):
    await calculate_new_growth(message=message,
                               bot=bot,
                               dp_pool=dp_pool,
                               user_id=user_id,
                               chat_id=chat_id,
                               now=now)


@user_messages.message(Command("show_global_top"))
async def show_global_top(message: Message, dp_pool: Pool):
    rows = await get_scores(dp_pool)
    await view_table(message, rows)


@user_messages.message(Command("show_chat_top"))
async def show_global_top(message: Message, dp_pool: Pool, chat_id: int):
    rows = await get_scores(dp_pool, chat_id)
    await view_table(message, rows)


@user_messages.message(Command("game"))
async def handle_dice(message: Message, bot: Bot, dp_pool: Pool, user_id: int, chat_id: int, now: int):
    await game_dice(bot=bot,
                    chat_id=chat_id,
                    user_id=user_id,
                    dp_pool=dp_pool,
                    message=message,
                    now=now)


@user_messages.message(Command("shop"))
async def handle_shop(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –º–∞—Å–∫—É", reply_markup=shop_kb(page=1))  # ‚úÖ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é

    # try:
    #     # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    #     bot.edit_message_text("Welcome to the Shop! Choose a mask to buy:", chat_id=message.chat.id,
    #                           message_id=message.message_id, reply_markup=markup)
    # except Exception as e:
    #     # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #     print(f"Error editing message: {e}")
    #     bot.send_message(message.chat.id, "Welcome to the Shop! Choose a mask to buy:", reply_markup=markup)


@user_messages.message(Command("profile"))
async def handle_shop(message: Message, dp_pool, user_id, username):
    suitcase = await gather_all_masks(dp_pool, user_id)

    await message.answer(
        f'<a href="tg://user?id={user_id}">{username}</a> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π üß≥–ß–µ–º–æ–¥–∞–Ω:\n\n'
        f'–ú–∞—Å–∫–∏:  {suitcase or "–ø—É—Å—Ç–æ üò¢"}',
        parse_mode="HTML"
    )
