import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiomysql import Pool

from Database.database import MASKS, BOOSTS, user_active_mask
from FSM.Shop import ShopStates
from Keyboards.user_kb import mask_kb, show_category, boosts_kb, inventory_section_kb, InventoryKeyboard
from Services.game_logic import get_balance, set_balance, save_mask_into_db, save_boost_into_db, get_my_masks, \
    get_my_boosts, update_use_boost_with_transaction

user_callback = Router()


@user_callback.callback_query(F.data.startswith("category:"))
async def open_category(callback: CallbackQuery, state: FSMContext, dp_pool, user_id, full_name):
    category = callback.data.split(":")[1]
    balance = await get_balance(dp_pool, user_id)
    await state.update_data(current_category=category)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    masks = await get_my_masks(dp_pool, user_id)
    active_mask = user_active_mask.get(user_id, 'üö´')
    await show_category(callback.message, category, balance, full_name, page=1, user_masks=masks, active_mask=active_mask)
    await state.set_state(ShopStates.category)


@user_callback.callback_query(F.data.startswith("buy_mask"))
async def buy_mask_from_shop(callback: CallbackQuery, dp_pool: Pool, user_id: int):
    balance = await get_balance(
        dp_pool=dp_pool,
        user_id=user_id
    )
    # buy_mask:mask{count}
    target_id = callback.data.split(":")[1]
    mask = next((m for m in MASKS if m['id'] == target_id), None)

    if mask:
        price = mask['price']
        emoji = mask['emoji']

    if price > balance:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        return

    await callback.answer(f"üî∞ –í—ã –∫—É–ø–∏–ª–∏ {emoji} –∑–∞ {price} ü™ô\n–ë–∞–ª–∞–Ω—Å: {balance - price} ü™ô", show_alert=True)
    new_balance = balance - price
    await set_balance(dp_pool, user_id, new_balance)
    await save_mask_into_db(dp_pool, user_id, target_id)


@user_callback.callback_query(F.data.startswith("buy_boost"))
async def buy_mask_from_shop(callback: CallbackQuery, dp_pool: Pool, user_id: int):
    balance = await get_balance(
        dp_pool=dp_pool,
        user_id=user_id
    )
    # buy_mask:mask{count}
    target_id = callback.data.split(":")[1]
    boost = next((m for m in BOOSTS if m['id'] == target_id), None)

    if boost:
        price = boost['price']
        name = boost['name']
        time_minutes = boost['time']

    if price > balance:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤–æ–¥ –º–∏–Ω—É—Ç –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–∞—Å—ã/–º–∏–Ω—É—Ç—ã)
    if time_minutes >= 60:
        hours = time_minutes // 60
        minutes = time_minutes % 60
        time_str = f"{hours} —á" + (f" {minutes} –º–∏–Ω" if minutes else "")
    else:
        time_str = f"{time_minutes} –º–∏–Ω"

    await callback.answer(
        f"üî∞ –í—ã –∫—É–ø–∏–ª–∏ –±—É—Å—Ç\n"
        f"(‚è≥ —É—Å–∫–æ—Ä—è–µ—Ç –Ω–∞ {time_str}) –∑–∞ {price} ü™ô\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance - price} ü™ô",
        show_alert=True
    )

    new_balance = balance - price
    await set_balance(dp_pool, user_id, new_balance)
    await save_boost_into_db(dp_pool, user_id, target_id)


@user_callback.callback_query(F.data.startswith("mask_info"))
async def mask_info_handler(callback: CallbackQuery):
    emoji, name = callback.data.split(':')[1:]
    await callback.answer(
        f"{emoji}{name}\n"
        f"–ú–∞—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        show_alert=True
    )


@user_callback.callback_query(F.data.startswith("boost_info"))
async def boost_info_handler(callback: CallbackQuery):
    emoji, name, time_minutes = callback.data.split(':')[1:]
    await callback.answer(
        f"{emoji}{name}\n"
        f"‚è≥ –≠—Ç–æ—Ç –±—É—Å—Ç —Å–æ–∫—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ {time_minutes} –º–∏–Ω—É—Ç!",
        parseMode="HTML",
        show_alert=True
    )


@user_callback.callback_query(F.data.startswith("page"))
async def pagination(callback: CallbackQuery):
    await callback.answer()
    # page:category
    parts = callback.data.split(":")
    page = int(parts[1])
    category = parts[2]
    if category == "masks":
        kb = mask_kb(page, active_category=category)
    elif category == "boosts":
        kb = boosts_kb(page, active_category=category)
    else:
        kb = None  # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —è–∫–∞—Å—å —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è

    if kb:
        await callback.message.edit_reply_markup(reply_markup=kb)


@user_callback.callback_query(F.data == "nothing")
async def nothing(callback: CallbackQuery):
    await callback.answer()


@user_callback.callback_query(F.data.startswith("show_"))
async def switch_section(callback: CallbackQuery, dp_pool, user_id, full_name):
    # callback.data –±—É–¥–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, "show_masks" –∏–ª–∏ "show_boosts"
    balance = await get_balance(dp_pool, user_id)
    active_mask = user_active_mask.get(user_id, 'üö´')

    masks = await get_my_masks(dp_pool, user_id)
    boosts = await get_my_boosts(dp_pool, user_id)
    if callback.data == "show_masks":
        kb = inventory_section_kb(masks, "–ú–∞—Å–∫–∏", is_mask=True, user_id=user_id)
        section_name = "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å–Ω—É—é –º–∞—Å–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Ä—è–¥–æ–º —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑!"
    else:
        kb = inventory_section_kb(boosts, "–ë—É—Å—Ç—ã", is_mask=False, user_id=user_id)
        section_name = "–ë—É—Å—Ç—ã ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π –∏—Ö, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è!"

    text = (f'<i><a href="tg://user?id={user_id}">{full_name}</a> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π üß≥–ß–µ–º–æ–¥–∞–Ω:\n'
            f'–ë–∞–ª–∞–Ω—Å: {balance} ü™ô\n'
            f'–ú–∞—Å–∫–∞: {active_mask}\n\n'
            f'{section_name}</i>')

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)


@user_callback.callback_query(F.data.startswith("use_"))
async def use_item(callback: CallbackQuery, dp_pool, full_name):
    user_id = callback.from_user.id
    data = callback.data
    balance = await get_balance(dp_pool, user_id)

    if data.startswith("use_mask:"):
        mask_id = data.split(":")[1]
        matching = next((m for m in MASKS if m['id'] == mask_id), None)
        if matching:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É
            user_active_mask[user_id] = matching.get('emoji', '‚ùî')

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            masks = await get_my_masks(dp_pool, user_id)
            kb = inventory_section_kb(items=masks, section="–ú–∞—Å–∫–∏", is_mask=True, user_id=user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Å–∫–æ–π
            active_mask = user_active_mask.get(user_id, '')
            text = (f'<i><a href="tg://user?id={user_id}">{full_name}</a> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π üß≥–ß–µ–º–æ–¥–∞–Ω:\n'
                    f'–ë–∞–ª–∞–Ω—Å: {balance} ü™ô\n'
                    f'–ú–∞—Å–∫–∞: {active_mask}\n\n'
                    '–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å–Ω—É—é –º–∞—Å–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Ä—è–¥–æ–º —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑!.</i>')

            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
            await callback.answer(f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –º–∞—Å–∫—É {active_mask}!")

    elif data.startswith("use_boost:"):
        boost_id = data.split(":")[1]
        matching = next((b for b in BOOSTS if b['id'] == boost_id), None)
        if matching:
            result, message = await update_use_boost_with_transaction(matching, dp_pool, user_id)
            if result:
                await callback.answer(f"{message}")
            else:
                await callback.answer(f"{message}")

            # await callback.answer(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±—É—Å—Ç {matching['name']}!")
        else:
            await callback.answer("–ë—É—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

        user_boosts = await get_my_boosts(dp_pool, user_id)

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
        kb = InventoryKeyboard.build_boost_inventory(user_boosts, page=1)

        await callback.message.edit_reply_markup(reply_markup=kb)
        await callback.answer(message, show_alert=True)


@user_callback.callback_query(F.data == 'category:inventory')
async def handle_inventory(callback: CallbackQuery, dp_pool, username, user_id):
    masks = await get_my_masks(dp_pool, user_id)
    kb = inventory_section_kb(masks, "–ú–∞—Å–∫–∏", is_mask=True, user_id=user_id)
    balance = await get_balance(dp_pool, user_id)
    active_mask = user_active_mask.get(user_id, 'üö´')
    await callback.message.answer(
        f'<i><a href="tg://user?id={user_id}">{username}</a> –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π üß≥–ß–µ–º–æ–¥–∞–Ω:\n–ë–∞–ª–∞–Ω—Å: {balance} ü™ô\n–ú–∞—Å–∫–∞: {active_mask}\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å–Ω—É—é –º–∞—Å–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Ä—è–¥–æ–º —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑!</i>',
        parse_mode="HTML", reply_markup=kb)
