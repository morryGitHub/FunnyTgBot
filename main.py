import sqlite3
import mysql.connector
from urllib.parse import urlparse
import os
import time
from datetime import datetime
import shutil
import logging
import telebot
import threading

from random import randint, random, choice
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CREATOR = int(os.getenv("CREATOR_ID"))
BACKUP = os.getenv("backup_dir")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(TOKEN)
GAMES = ['üéØ', 'üèÄ', '‚öΩ', 'üé≥', 'üé≤']
message_ID = None


def select_game():
    return choice(GAMES)


def migrate_sqlite_to_mysql_in_background():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    threading.Thread(target=migrate_sqlite_to_mysql).start()


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    attempts = 5
    while attempts > 0:
        try:
            conn = sqlite3.connect('dick_bot.db')
            return conn, conn.cursor()
        except sqlite3.OperationalError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            time.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            attempts -= 1
    return None, None


def create_table():
    conn, cursor = get_db_connection()
    if conn and cursor:
        conn.commit()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS info (
            user INTEGER,
            chat_id INTEGER,
            name TEXT,
            score INT DEFAULT 0,
            last_used INTEGER DEFAULT NULL,
            dice_control INTEGER DEFAULT NULL,
            PRIMARY KEY (user, chat_id)
        )
        """)
        conn.commit()
        conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
def get_mysql_connection():
    mysql_url = 'mysql://root:xKIHWqWQNqdTxgkuDSRHyeDLsFGalCYe@caboose.proxy.rlwy.net:18935/railway'
    parsed_url = urlparse(mysql_url)

    db_config = {
        'host': parsed_url.hostname,
        'port': parsed_url.port,
        'user': parsed_url.username,
        'password': parsed_url.password,
        'database': parsed_url.path[1:]
    }

    try:
        connection = mysql.connector.connect(**db_config)
        return connection, connection.cursor()
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {err}")
        return None, None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL
def migrate_sqlite_to_mysql():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    create_table()

    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
    sqlite_conn, sqlite_cursor = get_db_connection()
    if sqlite_conn and sqlite_cursor:
        try:
            sqlite_cursor.execute("SELECT user, chat_id, name, score, last_used, dice_control FROM info")
            rows = sqlite_cursor.fetchall()
            sqlite_conn.close()
        except sqlite3.OperationalError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite: {e}")
            return

    # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    mysql_conn, mysql_cursor = get_mysql_connection()
    if mysql_conn and mysql_cursor:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ MySQL (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        create_table_query = """
        CREATE TABLE IF NOT EXISTS info (
            user BIGINT,
            chat_id BIGINT,
            name TEXT,
            score INT DEFAULT 0,
            last_used INTEGER DEFAULT NULL,
            dice_control INTEGER DEFAULT NULL,
            PRIMARY KEY (user, chat_id)
        );
        """
        mysql_cursor.execute(create_table_query)
        mysql_conn.commit()

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL
        insert_query = """
        INSERT INTO info (user, chat_id, name, score, last_used, dice_control) 
        VALUES (%s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE 
            name = VALUES(name),
            score = VALUES(score),
            last_used = VALUES(last_used),
            dice_control = VALUES(dice_control);
        """

        for row in rows:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ chat_id –±—ã–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            chat_id = row[1]
            if abs(chat_id) > 9223372036854775807:
                logging.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ chat_id {chat_id} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å

            mysql_cursor.execute(insert_query, row)

        mysql_conn.commit()
        mysql_cursor.close()
        mysql_conn.close()

        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ MySQL –Ω–∞ Railway!")
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL.")


def backup_database_sqlite():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    original_db_path = 'dick_bot.db'  # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = f'{BACKUP}'

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_db_path = os.path.join(backup_dir, f'dick_bot_backup_{timestamp}.db')

    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        shutil.copy(original_db_path, backup_db_path)
        print(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_db_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


backup_database_sqlite()


@bot.message_handler(commands=["start"])
def send_welcome(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_fullname = message.from_user.full_name or message.from_user.username

    # –í—ã–∑–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    cursor.execute("SELECT chat_id FROM info WHERE user = ? AND chat_id = ?", (user_id, chat_id))
    if cursor.fetchone():
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, "üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ! " + r'/dick')
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute("INSERT OR IGNORE INTO info (chat_id, user, name) VALUES (?, ?, ?)",
                       (chat_id, user_id, user_fullname))
        conn.commit()
        bot.reply_to(message, f"üéâ –ü—Ä–∏–≤–µ—Ç, {user_fullname}!" + r"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞. /dick")

    migrate_sqlite_to_mysql_in_background()
    conn.close()


@bot.message_handler(commands=["show_global_top"])
def show_global_top(message):
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT name, MAX(score) as max_score FROM info GROUP BY name ORDER BY max_score DESC")
    rows = cursor.fetchall()
    conn.close()

    if rows:
        bot.reply_to(message, f"üìù <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: </b>\n\n{show_table(rows)}", parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@bot.message_handler(commands=["show_chat_top"])
def show_chat_top(message):
    chat_id = message.chat.id
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT name, score FROM info WHERE chat_id = ? ORDER BY score DESC", (chat_id,))
    rows = cursor.fetchall()
    conn.close()

    if rows:
        bot.reply_to(message, f"üìù <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{show_table(rows)}", parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def show_table(table):
    return "\n".join(
        [f"{reward(i + 1)} {i + 1}. <b>{row[0]}</b>: <b>{row[1]} —Å–º</b>" for i, row in enumerate(table)])


@bot.message_handler(commands=['dick', 'penis'])
def grow_penis(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    now = int(time.time())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT score, last_used FROM info WHERE user = ? AND chat_id = ?", (user_id, chat_id))
    result = cursor.fetchone()
    if result:
        score, last_used = result
        waiting_time = 43200  # 12 hours
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å, –∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 12 —á–∞—Å–æ–≤
        if last_used is not None and now - last_used < waiting_time:
            remaining = waiting_time - (now - last_used)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message,
                         f"üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
            conn.close()
            return

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
        grow = custom_randint()  # -5, 10
        updated_score = score + grow
        cursor.execute("UPDATE info SET score = ?, last_used = ? WHERE user = ? AND chat_id = ?",
                       (updated_score, now, user_id, chat_id))
        conn.commit()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ MySQL —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º score
        migrate_sqlite_to_mysql_in_background()

        bot.reply_to(message,
                     f"üå± –í–∞—à —á–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã—Ä–æ—Å –Ω–∞ <b>{grow}</b> —Å–º.\nüìè –¢–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—Ä: <b>{updated_score}</b> —Å–º.",
                     parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /start.")

    conn.close()


def custom_randint():
    while True:
        grow = randint(-5, 10)
        if grow >= 0 or random() < 0.5:  # 50% —à–∞–Ω—Å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            return grow


@bot.message_handler(commands=['clear_table'])
def clear_database(message):
    if message.from_user.id == CREATOR:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="clear_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="clear_no"))
        bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=markup)
    else:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ["clear_yes", "clear_no"])
def handle_confirmation(call):
    if call.data == "clear_yes":
        conn, cursor = get_db_connection()
        if conn:
            cursor.execute("DELETE FROM info")
            conn.commit()
            conn.close()
            bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


@bot.message_handler(commands=["clear_mysql_data"])
def clear_mysql_data(message):
    if message.from_user.id == CREATOR:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="clear_mysql_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="clear_mysql_no"))
        bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL?", reply_markup=markup)
    else:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ["clear_mysql_yes", "clear_mysql_no"])
def handle_mysql_clear_confirmation(call):
    if call.data == "clear_mysql_yes":
        mysql_conn, mysql_cursor = get_mysql_connection()
        if mysql_conn and mysql_cursor:
            try:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã info –≤ MySQL
                mysql_cursor.execute("DELETE FROM info")
                mysql_conn.commit()
                mysql_cursor.close()
                mysql_conn.close()
                bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL —É–¥–∞–ª–µ–Ω—ã.")
            except mysql.connector.Error as err:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL: {err}")
                bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


def reward(place):
    return ["ü•á", "ü•à", "ü•â", "üéó"][min(place - 1, 3)]


# minigames


@bot.message_handler(commands=["game"])
def handle_dice(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    now = int(time.time())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor.execute("SELECT score, dice_control, last_used FROM info WHERE user = ? AND chat_id = ?", (user_id, chat_id))
    result = cursor.fetchone()

    if result:
        score, dice_control, last_used = result
        waiting_time = 10800  # 3 —á–∞—Å–∞

        if last_used is None or last_used == 0:
            bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ —É –≤–∞—Å. –í–≤–µ–¥–∏—Ç–µ /dick")
            return


        if dice_control is not None and now - dice_control < waiting_time:
            remaining = waiting_time - (now - dice_control)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message,
                         f"üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
            conn.close()
            return

        try:
            sent_dice = bot.send_dice(message.chat.id, emoji='üé≤')
            threading.Timer(5, process_dice_result, args=(message, sent_dice)).start()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–±–∏–∫–∞: {e}")
            bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–±–∏–∫–∞.")

        cursor.execute("UPDATE info SET dice_control = ? WHERE user = ? AND chat_id = ?", (now, user_id, chat_id))
        conn.commit()

        migrate_sqlite_to_mysql_in_background()

        bot.send_message(message.chat.id, "üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏! üçÄ")

    else:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    conn.close()


def process_dice_result(message, sent_dice):
    result = sent_dice.dice.value  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    user_id = message.from_user.id
    chat_id = message.chat.id
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if result == 6:
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–±–µ–¥–∞! –¢—ã —Å–æ–∫—Ä–∞—â–∞–µ—à—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 3 —á–∞—Å–∞! üåü")

        cursor.execute("SELECT last_used FROM info WHERE user = ? AND chat_id = ?",
                       (user_id, chat_id))
        result_last_used = cursor.fetchone()

        # –°–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 3 —á–∞—Å–∞ –æ—Ç last_used
        new_last_used = result_last_used[0] - 10800  # –í—ã—á–∏—Ç–∞–µ–º 3 —á–∞—Å–∞ (10800 —Å–µ–∫—É–Ω–¥)
        if new_last_used < 0:
            new_last_used = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ last_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE info SET last_used = ? WHERE user = ? AND chat_id = ?",
                       (new_last_used, user_id, chat_id))
        conn.commit()

        return True
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª
        bot.reply_to(message, "üò¢ –£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üé≤")
        return False


bot.polling(non_stop=True)
