import sqlite3
import mysql.connector
from urllib.parse import urlparse
import os
import time
from datetime import datetime
import shutil
import logging
import telebot
import threading

from random import randint, random
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CREATOR = int(os.getenv("CREATOR_ID"))
BACKUP = os.getenv(r"backup_dir")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(TOKEN)


def migrate_sqlite_to_mysql_in_background():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    threading.Thread(target=migrate_sqlite_to_mysql).start()


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    attempts = 5
    while attempts > 0:
        try:
            conn = sqlite3.connect('dick_bot.db')
            return conn, conn.cursor()
        except sqlite3.OperationalError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            time.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            attempts -= 1
    return None, None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
def get_mysql_connection():
    mysql_url = 'mysql://root:xKIHWqWQNqdTxgkuDSRHyeDLsFGalCYe@caboose.proxy.rlwy.net:18935/railway'
    parsed_url = urlparse(mysql_url)
    db_config = {
        'host': parsed_url.hostname,
        'port': parsed_url.port,
        'user': parsed_url.username,
        'password': parsed_url.password,
        'database': parsed_url.path[1:]
    }

    try:
        connection = mysql.connector.connect(**db_config)
        return connection, connection.cursor()
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {err}")
        return None, None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL
def migrate_sqlite_to_mysql():
    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
    sqlite_conn, sqlite_cursor = get_db_connection()
    if sqlite_conn and sqlite_cursor:
        try:
            sqlite_cursor.execute(
                "SELECT user, chat_id, name, score, last_used, dice_control, coin, active_mask FROM info")
            rows = sqlite_cursor.fetchall()
            sqlite_conn.close()
        except sqlite3.OperationalError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite: {e}")
            return

    # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –∏ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    mysql_conn, mysql_cursor = get_mysql_connection()
    if mysql_conn and mysql_cursor:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ MySQL (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        create_table_query = """
        CREATE TABLE IF NOT EXISTS info (
            user BIGINT,
            chat_id BIGINT,
            name TEXT,
            score INT DEFAULT 0,
            last_used INTEGER DEFAULT NULL,
            dice_control INTEGER DEFAULT NULL,
            coin INTEGER DEFAULT 0,
            active_mask TEXT DEFAULT NULL,
            PRIMARY KEY (user, chat_id)
        );
        """
        mysql_cursor.execute(create_table_query)
        mysql_conn.commit()

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ MySQL
        insert_query = """
        INSERT INTO info (user, chat_id, name, score, last_used, dice_control, coin, active_mask) 
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE 
            user = VALUES(user),
            chat_id = VALUES(chat_id),
            name = VALUES(name),
            score = VALUES(score),
            last_used = VALUES(last_used),
            dice_control = VALUES(dice_control),
            coin = VALUES(coin),
            active_mask = VALUES(active_mask);
        """

        for row in rows:
            # print(f"Row data: {row}")  # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ chat_id –±—ã–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            chat_id = row[1]
            if abs(chat_id) > 9223372036854775807:
                logging.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ chat_id {chat_id} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ row –µ—Å—Ç—å –≤—Å–µ 8 –¥–∞–Ω–Ω—ã—Ö
            if len(row) == 8:
                row_data = row  # –ï—Å–ª–∏ –≤ row —É–∂–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            else:
                # –ï—Å–ª–∏ –≤ row –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç active_mask), –¥–æ–±–∞–≤–ª—è–µ–º None
                row_data = row + (None,)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è active_mask

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            try:
                mysql_cursor.execute(insert_query, row_data)
            except mysql.connector.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}, row_data: {row_data}")
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å

        mysql_conn.commit()
        mysql_cursor.close()
        mysql_conn.close()

        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ MySQL –Ω–∞ Railway!")
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL.")


def backup_database_sqlite():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    original_db_path = 'dick_bot.db'  # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = f'{BACKUP}'

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_db_path = os.path.join(backup_dir, f'dick_bot_backup_{timestamp}.db')

    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        shutil.copy(original_db_path, backup_db_path)
        print(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_db_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

@bot.message_handler(commands=['help'])
def help_command(message):
    commands_text = """
/start - Register in the database
/dick - Increase your size by a random amount
/game - Play a mini-game to reduce cooldown time
/show_global_top - View the global leaderboard by score
/show_chat_top - View the top users in the current chat
/buy_mask - Buy a mask using your coins
/buy_boost - Buy a boost to reduce cooldown or get bonuses
/show_mask - Show your owned masks
/show_boosts - View available boosts and your boost inventory
/help - All commands
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2
    commands_text_escaped = commands_text.replace("_", "\\_")

    bot.send_message(message.chat.id, commands_text_escaped, parse_mode="MarkdownV2")


@bot.message_handler(commands=['balance'])
def balance_command(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT coin FROM info WHERE user = ?", (user_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        coins = result[0]
        bot.send_message(message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å.")


@bot.message_handler(commands=["start"])
def send_welcome(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_fullname = message.from_user.full_name or message.from_user.username

    # –í—ã–∑–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    cursor.execute("SELECT chat_id FROM info WHERE user = ? AND chat_id = ?", (user_id, chat_id))
    if cursor.fetchone():
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, "üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ! " + r'/dick')
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute("INSERT OR IGNORE INTO info (chat_id, user, name) VALUES (?, ?, ?)",
                       (chat_id, user_id, user_fullname))
        conn.commit()
        bot.reply_to(message, f"üéâ –ü—Ä–∏–≤–µ—Ç, {user_fullname}!" + r"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞. /dick")

    migrate_sqlite_to_mysql_in_background()
    conn.close()


@bot.message_handler(commands=["show_global_top"])
def show_global_top(message):
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT name, MAX(score) max_score, USER FROM info GROUP BY name ORDER BY max_score DESC")
    rows = cursor.fetchall()
    conn.close()

    if rows:
        masked_rows = [(mask_name(row[0], row[2]), row[1]) for row in rows]
        bot.reply_to(message, f"üìù <b>üèÜ Hall of Fame: </b>\n\n{show_table(masked_rows)}", parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@bot.message_handler(commands=["show_chat_top"])
def show_chat_top(message):
    chat_id = message.chat.id
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT name, score, USER FROM info WHERE chat_id = ? ORDER BY score DESC", (chat_id,))
    rows = cursor.fetchall()
    conn.close()

    if rows:
        masked_rows = [(mask_name(row[0], row[2]), row[1]) for row in rows]
        bot.reply_to(message, f"üìù <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞:</b>\n\n{show_table(masked_rows)}", parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def show_table(table):
    return "\n".join(
        [f"{reward(i + 1)} {i + 1}. <b>{row[0]}</b>: <b>{row[1]} —Å–º</b>" for i, row in enumerate(table)]
    )


def mask_name(name, user):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–ª–∏ –º–∞—Å–∫—É –ø–µ—Ä–µ–¥ –Ω–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT active_mask FROM info WHERE user = ?", (user,))
    active_mask = cursor.fetchone()
    conn.close()

    # –ï—Å–ª–∏ –º–∞—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º
    if active_mask and active_mask[0]:
        return f"{active_mask[0]} {name}"
    else:
        # –ï—Å–ª–∏ –º–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è
        return f"{name}"


@bot.message_handler(commands=['dick', 'penis'])
def grow_penis(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    now = int(time.time())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor.execute("SELECT score, last_used FROM info WHERE user = ? AND chat_id = ?", (user_id, chat_id))
    result = cursor.fetchone()
    if result:
        score, last_used = result
        waiting_time = 43200  # 12 hours
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å, –∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 12 —á–∞—Å–æ–≤
        if last_used is not None and now - last_used < waiting_time:
            remaining = waiting_time - (now - last_used)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message,
                         f"üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
            conn.close()
            return

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
        grow = custom_randint()  # -5, 10
        updated_score = score + grow
        cursor.execute("SELECT coin FROM info WHERE user = ? ", (user_id,))
        result_coin = cursor.fetchone()
        if result_coin:
            coin = result_coin[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        coin += randint(1, 5)

        cursor.execute("UPDATE info SET score = ?, last_used = ? WHERE user = ? AND chat_id = ? ",
                       (updated_score, now, user_id, chat_id))

        cursor.execute("UPDATE info SET coin = ? WHERE user = ? ",
                       (coin, user_id))

        conn.commit()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ MySQL —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º score
        backup_database_sqlite()
        migrate_sqlite_to_mysql_in_background()

        bot.reply_to(message,
                     f"üå± –í–∞—à —á–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã—Ä–æ—Å –Ω–∞ <b>{grow}</b> —Å–º.\nüìè –¢–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—Ä: <b>{updated_score}</b> —Å–º.",
                     parse_mode='HTML')
    else:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /start.")

    conn.close()


def custom_randint():
    while True:
        grow = randint(-5, 10)
        if grow >= 0 or random() < 0.5:  # 50% —à–∞–Ω—Å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            return grow


@bot.message_handler(commands=['clear_table'])
def clear_database(message):
    if message.from_user.id == CREATOR:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="clear_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="clear_no"))
        bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=markup)
    else:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ["clear_yes", "clear_no"])
def handle_confirmation(call):
    if call.data == "clear_yes":
        conn, cursor = get_db_connection()
        if conn:
            cursor.execute("DELETE FROM info")
            conn.commit()
            conn.close()
            bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


@bot.message_handler(commands=["clear_mysql_data"])
def clear_mysql_data(message):
    if message.from_user.id == CREATOR:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="clear_mysql_yes"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="clear_mysql_no"))
        bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL?", reply_markup=markup)
    else:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")


@bot.callback_query_handler(func=lambda call: call.data in ["clear_mysql_yes", "clear_mysql_no"])
def handle_mysql_clear_confirmation(call):
    if call.data == "clear_mysql_yes":
        mysql_conn, mysql_cursor = get_mysql_connection()
        if mysql_conn and mysql_cursor:
            try:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã info –≤ MySQL
                mysql_cursor.execute("DELETE FROM info")
                mysql_conn.commit()
                mysql_cursor.close()
                mysql_conn.close()
                bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL —É–¥–∞–ª–µ–Ω—ã.")
            except mysql.connector.Error as err:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL: {err}")
                bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(call.message.chat.id, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


def reward(place):
    return ["ü•á", "ü•à", "ü•â", "üéó"][min(place - 1, 3)]


# minigames


@bot.message_handler(commands=["game"])
def handle_dice(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    now = int(time.time())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    cursor.execute("SELECT score, dice_control, last_used FROM info WHERE user = ? AND chat_id = ?",
                   (user_id, chat_id))

    result = cursor.fetchone()

    if result:
        score, dice_control, last_used = result
        waiting_time = 10800  # 3 —á–∞—Å–∞

        if last_used is None or last_used == 0:
            bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ —É –≤–∞—Å. –í–≤–µ–¥–∏—Ç–µ /dick")
            return

        if dice_control is not None and now - dice_control < waiting_time:
            remaining = waiting_time - (now - dice_control)
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            bot.reply_to(message,
                         f"üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
            conn.close()
            return

        try:
            sent_dice = bot.send_dice(message.chat.id, emoji='üé≤')
            threading.Timer(5, process_dice_result, args=(message, sent_dice)).start()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–±–∏–∫–∞: {e}")
            bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–±–∏–∫–∞.")

        cursor.execute("UPDATE info SET dice_control = ? WHERE user = ? ", (now, user_id,))

        conn.commit()

        migrate_sqlite_to_mysql_in_background()

        bot.send_message(message.chat.id, "üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏! üçÄ")

    else:
        bot.reply_to(message, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    conn.close()


def process_dice_result(message, sent_dice):
    result = sent_dice.dice.value
    user_id = message.from_user.id
    chat_id = message.chat.id
    conn, cursor = get_db_connection()
    if not conn:
        bot.reply_to(message, "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if result in [4, 5, 6]:
        time_hour = result - 6 + 3
        # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–±–µ–¥–∞! –¢—ã —Å–æ–∫—Ä–∞—â–∞–µ—à—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ {time_hour} —á–∞—Å(–∞)! üåü")

        cursor.execute("SELECT last_used FROM info WHERE user = ? and chat_id = ? ",
                       (user_id, chat_id))

        result_last_used = cursor.fetchone()

        cursor.execute("SELECT coin FROM info WHERE user = ? ",
                       (user_id,))
        result_coin = cursor.fetchone()

        coin = result_coin[0]
        coin += time_hour

        # –°–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 3 —á–∞—Å–∞ –æ—Ç last_used
        new_last_used = result_last_used[0] - 3600 * time_hour
        if new_last_used < 0:
            new_last_used = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ last_used –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE info SET last_used = ? WHERE user = ? AND chat_id = ?",
                       (new_last_used, user_id, chat_id))

        cursor.execute("UPDATE info SET coin = ? WHERE user = ? ",
                       (coin, user_id))
        conn.commit()

        return True
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª
        bot.reply_to(message, "üò¢ –£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üé≤")
        return False


def get_shop_items_page(page: int = 1, items_per_page: int = 5):
    # –†–∞—Å—á—ë—Ç —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
    offset = (page - 1) * items_per_page

    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT mask_id, masks_unicode, price FROM shop LIMIT ? OFFSET ?", (items_per_page, offset))
    items = cursor.fetchall()
    conn.close()

    return items


def show_shop(message, page=1):
    items = get_shop_items_page(page)
    markup = types.InlineKeyboardMarkup()

    for item in items:
        mask_id, masks_unicode, price = item
        button = types.InlineKeyboardButton(f"{masks_unicode} - {price} Coins", callback_data=f"buy_mask:{mask_id}")
        markup.add(button)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    if page > 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        navigation_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è Previous", callback_data=f"page:{page - 1}"))

    navigation_buttons.append(types.InlineKeyboardButton(f"Page {page}", callback_data="current_page"))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    next_page_items = get_shop_items_page(page + 1)
    if next_page_items:  # –ï—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Next"
        navigation_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è Next", callback_data=f"page:{page + 1}"))

    markup.add(*navigation_buttons)

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.edit_message_text("Welcome to the Shop! Choose a mask to buy:", chat_id=message.chat.id,
                              message_id=message.message_id, reply_markup=markup)
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"Error editing message: {e}")
        bot.send_message(message.chat.id, "Welcome to the Shop! Choose a mask to buy:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("page:"))
def handle_page_navigation(call):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
    page = int(call.data.split(":")[1])
    show_shop(call.message, page)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    bot.answer_callback_query(call.id)  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_mask:"))
def handle_buy_mask(call):
    mask_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    buy_mask(mask_id, user_id, call.message)


def buy_mask(mask_id: int, user_id: int, message):
    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    cursor.execute("SELECT masks_unicode, price FROM shop WHERE mask_id = ?", (mask_id,))
    item = cursor.fetchone()

    if not item:
        conn.close()
        bot.send_message(message.chat.id, "‚ùå Mask not found in the shop.")
        return

    masks_unicode, price = item

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–∞—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT 1 FROM masks WHERE user = ? AND masks_unicode = ?", (user_id, masks_unicode))
    already_owned = cursor.fetchone()

    if already_owned:
        conn.close()
        bot.send_message(message.chat.id, f"You already own {masks_unicode}.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT coin FROM info WHERE user = ?", (user_id,))
    user_coins = cursor.fetchone()

    if not user_coins:
        conn.close()
        bot.send_message(message.chat.id, "‚ùå Could not find your coin balance.")
        return

    user_coins = user_coins[0]

    if user_coins < price:
        conn.close()
        bot.send_message(message.chat.id, f"üí∏ Not enough coins to buy {masks_unicode}. You need {price} coins.")
        return

    # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É: —Å–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É
    cursor.execute("UPDATE info SET coin = coin - ? WHERE user = ?", (price, user_id))
    cursor.execute("INSERT INTO masks (user, masks_unicode) VALUES (?, ?)", (user_id, masks_unicode))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"‚úÖ You bought {masks_unicode} for {price} coins.")


@bot.message_handler(commands=['buy_mask'])
def shop(message):
    show_shop(message, page=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


@bot.message_handler(commands=['show_mask'])
def my_masks(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT DISTINCT masks_unicode FROM masks WHERE user = ?", (user_id,))
    masks = cursor.fetchall()

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É
    cursor.execute("SELECT coin, active_mask FROM info WHERE user = ? ", (user_id,))
    result = cursor.fetchone()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchone(), —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    conn.close()

    if result:
        coins = result[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        active_mask = result[1]  # –ê–∫—Ç–∏–≤–Ω–∞—è –º–∞—Å–∫–∞
    else:
        coins = 0
        active_mask = "‚ùì"  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if masks:
        markup = types.InlineKeyboardMarkup(row_width=4)  # –ú–∞–∫—Å–∏–º—É–º 4 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        buttons = [
            types.InlineKeyboardButton(
                text=(mask[0] if mask[0] is not None else "‚ùì") + ("üëà" if mask[0] == active_mask else ""),
                callback_data=f"select_mask:{mask[0]}"
            ) for mask in masks
        ]
        markup.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–æ–∫

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–æ–π
        response = f"""üß≥  <b>Your inventory: </b>

<b>Your balance:</b> {coins}üí≤
<b>Active mask:</b> {active_mask}

<i>Select one of your masks to wear:</i>"""

        bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode="HTML")
    else:
        response = """üòî <b>No masks found!</b>

üõí <i>Go to the shop and buy one!</i> /shop"""
        bot.send_message(message.chat.id, response, parse_mode="HTML")


################################################


def get_boosts_page(page: int = 1, items_per_page: int = 5):
    offset = (page - 1) * items_per_page

    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT boost_id, boost_type, price FROM boosts_shop LIMIT ? OFFSET ?", (items_per_page, offset))
    items = cursor.fetchall()
    conn.close()

    return items


def show_boosts_shop(message, page=1):
    items = get_boosts_page(page)
    markup = types.InlineKeyboardMarkup()

    for item in items:
        boost_id, boost_type, price = item
        button = types.InlineKeyboardButton(f"{boost_type} - {price} Coins", callback_data=f"buy_boost:{boost_id}")
        markup.add(button)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    navigation_buttons = []

    if page > 1:
        navigation_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è Previous", callback_data=f"boosts_page:{page - 1}"))

    navigation_buttons.append(types.InlineKeyboardButton(f"Page {page}", callback_data="current_boosts_page"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—É—Å—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    next_page_items = get_boosts_page(page + 1)
    if next_page_items:
        navigation_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è Next", callback_data=f"boosts_page:{page + 1}"))

    if navigation_buttons:
        markup.add(*navigation_buttons)

    try:
        bot.edit_message_text("‚ö° Boost Shop! Choose a boost to buy:", chat_id=message.chat.id,
                              message_id=message.message_id, reply_markup=markup)
    except Exception as e:
        print(f"Error editing message: {e}")
        bot.send_message(message.chat.id, "‚ö° Boost Shop! Choose a boost to buy:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("boosts_page:"))
def handle_boosts_page_navigation(call):
    page = int(call.data.split(":")[1])
    show_boosts_shop(call.message, page)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_boost:"))
def handle_buy_boost(call):
    boost_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    buy_boost(boost_id, user_id, call.message)


def buy_boost(boost_id: int, user_id: int, message):
    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–∞
    cursor.execute("SELECT boost_type, price FROM boosts_shop WHERE boost_id = ?", (boost_id,))
    item = cursor.fetchone()

    if not item:
        conn.close()
        bot.send_message(message.chat.id, "‚ùå Boost not found.")
        return

    boost_type, price = item

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT coin FROM info WHERE user = ?", (user_id,))
    user_coins = cursor.fetchone()

    if not user_coins:
        conn.close()
        bot.send_message(message.chat.id, "‚ùå Could not find your coin balance.")
        return

    user_coins = user_coins[0]

    if user_coins < price:
        conn.close()
        bot.send_message(message.chat.id, f"üí∏ Not enough coins to buy {boost_type}. You need {price} coins.")
        return

    # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É: —Å–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±—É—Å—Ç
    cursor.execute("UPDATE info SET coin = coin - ? WHERE user = ?", (price, user_id))
    cursor.execute("INSERT INTO boosts (user, boost_type) VALUES (?, ?)", (user_id, boost_type))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"‚úÖ You bought boost: {boost_type} for {price} coins.")


@bot.message_handler(commands=['buy_boost'])
def boosts_command(message):
    show_boosts_shop(message, page=1)


def get_user_boosts(user_id):
    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, boost_type, purchased_count FROM boosts WHERE user = ?", (user_id,))
    items = cursor.fetchall()
    conn.close()
    return items


def show_inventory(message):
    user_id = message.from_user.id
    boosts = get_user_boosts(user_id)

    if not boosts:
        bot.send_message(message.chat.id, "üéí Your inventory is empty.")
        return

    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []

    for boost_id, boost_type, used in boosts:
        if used:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        label = f"üß™ {boost_type}"
        button = types.InlineKeyboardButton(label, callback_data=f"use_boost:{boost_id}")
        buttons.append(button)

    if not buttons:
        bot.send_message(message.chat.id, "üéí All your boosts have been used.")
        return

    for i in range(0, len(buttons), 3):
        markup.row(*buttons[i:i + 3])

    bot.send_message(message.chat.id, "üéí Your Boost Inventory:", reply_markup=markup)


active_boosts = {}


@bot.callback_query_handler(func=lambda call: call.data.startswith("use_boost:"))
def handle_use_boost(call):
    boost_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    conn = sqlite3.connect('dick_bot.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±—É—Å—Ç–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç)
    cursor.execute("SELECT boost_type, purchased_count FROM boosts WHERE id = ? AND user = ?", (boost_id, user_id))
    row = cursor.fetchone()

    if not row:
        conn.close()
        bot.answer_callback_query(call.id, "‚ùå Boost not found.")
        return

    boost_type, used = row
    effect_msg = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É—Å—Ç
    if used:
        conn.close()
        bot.answer_callback_query(call.id, "‚õî You have already used this boost.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –±—É—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in active_boosts and active_boosts[user_id] is not None:
        conn.close()
        bot.answer_callback_query(call.id, "‚õî You already have an active boost. Wait until it is used.")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if boost_type == "3 hours":
        cursor.execute("UPDATE info SET last_used = last_used - ? WHERE user = ? AND chat_id = ?",
                       (10800, user_id, chat_id))  # 3 —á–∞—Å–∞
        effect_msg = "üïí Cooldown reduced by 3 hours!"
    elif boost_type == "6 hours":
        cursor.execute("UPDATE info SET last_used = last_used - ? WHERE user = ? AND chat_id = ?",
                       (21600, user_id, chat_id))  # 6 —á–∞—Å–æ–≤
        effect_msg = "üïí Cooldown reduced by 6 hours!"
    elif boost_type == "Unlimited":
        cursor.execute("UPDATE info SET last_used = 0 WHERE user = ? AND chat_id = ?",
                       (user_id, chat_id))
        effect_msg = "üïí Cooldown fully reset! Unlimited access!"
    else:
        effect_msg = f"‚ö° Unknown boost type: {boost_type}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_boosts[user_id] = boost_id

    # –ü–æ–º–µ—á–∞–µ–º –±—É—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE boosts SET purchased_count = 1 WHERE id = ?", (boost_id,))

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±—É—Å—Ç
    conn.commit()

    # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    active_boosts[user_id] = None

    conn.close()

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"‚úÖ Boost '{boost_type}' activated!\n{effect_msg}")


@bot.message_handler(commands=['show_boosts'])
def inventory_command(message):
    show_inventory(message)


@bot.callback_query_handler(func=lambda call: True)
def handle_button(call):
    if call.data.startswith("select_mask:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å–∫–∏
        selected_mask = call.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å–∫—É –ø–æ—Å–ª–µ "select_mask:"
        user_id = call.from_user.id
        chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('dick_bot.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE info SET active_mask = ? WHERE user = ?", (selected_mask, user_id))
        conn.commit()
        conn.close()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        bot.answer_callback_query(call.id, text=f"You selected: {selected_mask}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('dick_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT masks_unicode FROM masks WHERE user = ?", (user_id,))
        masks = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω—É—é –º–∞—Å–∫—É
        cursor.execute("SELECT coin, active_mask FROM info WHERE user = ?", (user_id,))
        result = cursor.fetchone()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchone(), —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        conn.close()

        if result:
            coins = result[0]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            active_mask = result[1]  # –ê–∫—Ç–∏–≤–Ω–∞—è –º–∞—Å–∫–∞
        else:
            coins = 0
            active_mask = "‚ùì"  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å–æ–∫
        markup = types.InlineKeyboardMarkup(row_width=4)  # –ú–∞–∫—Å–∏–º—É–º 4 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        buttons = [
            types.InlineKeyboardButton(
                text=(mask[0] if mask[0] is not None else "‚ùì") + ("üëà" if mask[0] == selected_mask else ""),
                callback_data=f"select_mask:{mask[0]}"
            ) for mask in masks
        ]
        markup.add(*buttons)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–æ–∫
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–æ–π
        response = f"""üß≥  <b>Your inventory: </b>

    <b>Your balance:</b> {coins}üí≤
    <b>Active mask:</b> {active_mask}

    <i>Select one of your masks to wear:</i>"""

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.edit_message_text(response, chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup,
                              parse_mode="HTML")


bot.polling(non_stop=True)
