import logging

from aiogram.types import Message

from Database.database import user_active_mask


def mask_name(user_id, name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–ª–∏ –º–∞—Å–∫—É –ø–µ—Ä–µ–¥ –Ω–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    active_mask = user_active_mask.get(user_id, '')  # active_mask ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏
    if active_mask:
        return f"{active_mask} {name}"  # —É–±–∏—Ä–∞–µ–º [0], –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —ç–º–æ–¥–∑–∏
    return name


async def view_table(message: Message, rows):
    if rows:
        # masked_rows ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å mask_name –∫ –Ω–∏–∫–Ω–µ–π–º–∞–º
        masked_rows = [(mask_name(row[0], row[1]), row[2]) for row in rows]
        logging.debug(masked_rows)
        await message.answer(f"üìù <b>üèÜ Hall of Fame: </b>\n\n{show_table(masked_rows)}", parse_mode='HTML')
    else:
        await message.answer("üö´ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def show_table(table):
    return "\n".join(
        [f"{reward(i + 1)} {i + 1}. <b>{row[0]}</b>: <b>{row[1]} —Å–º</b>" for i, row in enumerate(table)]
    )


def reward(place):
    return ["ü•á", "ü•à", "ü•â", "üéó"][min(place - 1, 3)]
